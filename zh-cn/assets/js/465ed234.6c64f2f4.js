"use strict";(self.webpackChunkhaochen_blog=self.webpackChunkhaochen_blog||[]).push([[5299],{7407:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"understand-this-in-one-article","metadata":{"permalink":"/zh-cn/blog/understand-this-in-one-article","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-06-15-Understand-This.md","title":"\u7406\u89e3 JavaScript \u4e2d\u7684 This, Bind, Call \u548c Apply","description":"question","date":"2021-06-15T00:00:00.000Z","formattedDate":"2021\u5e746\u670815\u65e5","tags":[{"label":"JavaScript","permalink":"/zh-cn/blog/tags/java-script"},{"label":"Interview Qustions","permalink":"/zh-cn/blog/tags/interview-qustions"}],"readingTime":2.31,"truncated":true,"authors":[{"name":"Haochen Qi","title":"Full Stack Developer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"nextItem":{"title":"How to Upload Files to AWS S3 in Node.js?","permalink":"/zh-cn/blog/upload-files-to-s3-iwth-node"}},"content":"![question](/img/JS-Bind.png)\\n\\nMany of you may have been asked about **This** keyword in an interview. It is a really important concept in JavaScript yet slightly confusing to new developers. Today let us disscuss **this**, **apply**, **call** and **bind** in JavaScript.\\n\\n\x3c!--truncate--\x3e\\n\\n## **This** in JavaScript\\n\\nNot like other programming languages where this always refers to the current instance of the class, **this** in JavaScript depends on how a function is called. The usage of **apply**, **call** and **bind** methods can determine the value of **this**. Let\'s use an example to help us understand **this**.\\n\\n```javascript\\nvar test = {\\n  func: function () {\\n    console.log(this.bar);\\n  },\\n  prop: 1,\\n};\\n\\nvar func = test.func;\\nvar prop = 2;\\n\\ntest.func(); // 1\\nfunc(); // 2\\n```\\n\\nIn the example above, we can see that two ways of calling _func()_ generated different results. The reason is that _test.func()_ ran in the context of _test_ where _this_ refers, whereas the secoond _func_ ran in the global context.\\n\\n## **Call**, **Apply** and **Bind**\\n\\nWe use call(), apply() and bind() methods to set the this keyword independent of how the function is called. This is especially useful for the callbacks.\\n\\nThe call() and apply() methods set the this inside the function and immediately executes that function. The only difference between call() and apply() is that the apply() method accepts an array of arguments instead of comma separated values.\\n\\n> function.call(thisArg, arg1, agr2, ...)\\n\\n> function.apply(thisArg, [argumentsArr])\\n\\nThe code below will help us understand how call() and apply() work:\\n\\n```javascript\\nFunction.prototype.call = (context, ...args) => {\\n  context =\\n    context === undefined || context === null ? window : Object(context);\\n  context.fn = this;\\n  const result = context.fn(...args);\\n  delete context.fn;\\n  return result;\\n};\\n```\\n\\n```javascript\\nFunction.prototype.apply = (context, args) => {\\n  context =\\n    context === undefined || context === null ? window : Object(context);\\n  context.fn = this;\\n  const result = args ? context.fn(...args) : context.fn();\\n  delete context.fn;\\n  return result;\\n};\\n```\\n\\nNot like call() and apply(), the bind() creates a new function and sets the this keyword to the specified object.\\n\\n> function.bind(thisArg, optionalArguments)\\n\\n```javascript\\nFunction.prototype.myBind = (context, ...args) => {\\n  if (typeof this !== \\"function\\") {\\n    throw new TypeError(\\"error\\");\\n  }\\n  context =\\n    context === undefined || context === null ? window : Object(context);\\n  self = this;\\n  return (...bindArgs) => {\\n    return self.apply(context, [...args, ...bindArgs)])\\n};\\n```\\n\\n## Arrow Functions\\n\\nArrow functions do not have their own **this** binding. Instead, they go up to the next level of execution.\\n\\nIt can be useful to use the arrow function in cases where you really want this to refer to the outer context. For example, if you had an event listener inside of a class, you would probably want this to refer to some value in the class.\\n\\n---\\n\\nReference: [AWS S3 Doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this),\\n[Medium(JavaScript Fundmentals)](https://blog.bitsrc.io/understanding-call-bind-and-apply-methods-in-javascript-33dbf3217be)"},{"id":"upload-files-to-s3-iwth-node","metadata":{"permalink":"/zh-cn/blog/upload-files-to-s3-iwth-node","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-05-31-upload-files-to-s3-in-node.md","title":"How to Upload Files to AWS S3 in Node.js?","description":"question","date":"2021-05-31T00:00:00.000Z","formattedDate":"2021\u5e745\u670831\u65e5","tags":[{"label":"Node.js","permalink":"/zh-cn/blog/tags/node-js"},{"label":"AWS S3","permalink":"/zh-cn/blog/tags/aws-s-3"},{"label":"Bucket Operation","permalink":"/zh-cn/blog/tags/bucket-operation"}],"readingTime":4.07,"truncated":true,"authors":[{"name":"Haochen Qi","title":"Full Stack Developer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"prevItem":{"title":"\u7406\u89e3 JavaScript \u4e2d\u7684 This, Bind, Call \u548c Apply","permalink":"/zh-cn/blog/understand-this-in-one-article"},"nextItem":{"title":"Shallow Copy vs. Deep Copy","permalink":"/zh-cn/blog/understand-copy-in-js"}},"content":"![question](/img/S3.jpg)\\n\\n> Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. -- Amazon\\n\\nSimple Storage Service(S3) is a an object storage service provided by AWS in 2006. S3 provides developers with a distributed data storage service with high scalability, high durability and high availability. The data storage structure of S3 is very simple, which is a flat two-layer structure: one layer is a bucket, and the other layer is a storage object. A bucket is a way to classify data in S3, it is a container for data storage and every object needs to be stored in a certain bucket. It will become a part of the domain name for users to access data, so the name of the bucket must be unique.\\n\\n\x3c!--truncate--\x3e\\n\\nOur Node Apps often need to store user data like images, audio files, documents ,etc into somewhere secure and easily accessible instead of on local server. This is when S3 comes in as a perfect option. In this blog, we will go through how to upload your files in AWS s3 buckets.\\n\\n![question](/img/bucket.png)\\n\\n## Create a S3 Bucket\\n\\nIn this section, we will create a bucket on S3 for us to upload files in. To get start, you need to generate AWS Security Key Access Credentials first from your AWS Management console.\\n\\n![question](/img/IAM.png)\\n\\nOn the AWS Services panel, find IAM and click to go IAM dashboard. Under the Access Management section, find Users >> Add User.\\n![question](/img/IAM-user.png)\\nThen follow the steps to create a programmatic access AWS user attached with **AmazonS3FullAccess** policy. _Save your access key ID and secret access key in a secure place as you won\'t able to check them again._\\n![question](/img/s3-permission.png)\\n\\nNow let us create a bucket with a unique name. Similarly, find S3 On the AWS Services pane. On the dashboard, click **Create bucket** to create a new bucket with proper region and other default settings. After you create a bucket, we need to allow our client application to interact with our bucket. Go to Your Bucket >> Permissions >> Cross-origin resource sharing (CORS). Change the configuration as bellow.\\n\\n```json\\n[\\n  {\\n    \\"AllowedHeaders\\": [\\"*\\"],\\n    \\"AllowedMethods\\": [\\"POST\\", \\"GET\\", \\"PUT\\", \\"DELETE\\", \\"HEAD\\"],\\n    \\"AllowedOrigins\\": [\\"*\\"],\\n    \\"ExposeHeaders\\": []\\n  }\\n]\\n```\\n\\nNow, We have a bucket up for us to play with. Alternatively, you can also create a bucket with AWS SDK tool. Simply felllow [here](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/s3-example-creating-buckets.html).\\n\\n## Create a Simple Node App\\n\\nNow let us interact with our created bucket. Before we create a S3 instance, make sure to put sensitive data in the environment variables, simply create a .env file and save your data in that file. Here I will use a library called dotenv to handle .env file, it will loads environment variables from a .env file into process.env.\\n\\n```\\nAWS_ACCESS_KEY_ID=Your AWS Access Key ID\\nAWS_SECRET_ACCESS_KEY=Your AWS Secret Access Key\\nS3_BUCKET=Your Bucket Name\\n```\\n\\nThen let\'s create a S3 instance after we install all necessary dependencies with:\\n\\n```\\n$ npm i dotenv aws-sdk\\n```\\n\\nCreate a file name with app.js, let\'s write code in this file.\\n\\n```javascript\\nrequire(\\"dotenv\\").config();\\n\\nconst fs = require(\\"fs\\");\\nconst AWS = require(\\"aws-sdk\\");\\n\\nconst s3 = new AWS.S3({\\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\\n});\\n```\\n\\n## Interact With Our Bucket\\n\\nWith the S3 instance set up, we can now play with our bucket. We can upload files to our bucket, get all the files in our bucket and delete files.\\nBefore we upload the file, we need to read its contents in a buffer. After reading it, we can define the needed parameters for the file upload, such as Bucket, Key, and Body.Let\'s see the code.\\n\\n```javascript\\n/**\\n * Upload files\\n **/\\nconst uploadToS3 = async (file) => {\\n  // Read content from the file\\n  const fileContent = fs.readFileSync(file);\\n\\n  // Setting up S3 upload parameters\\n  const params = {\\n    Bucket: process.env.S3_BUCKET,\\n    Key: \\"your_image.jpg\\", // File name you want to save as in S3\\n    Body: fileContent,\\n  };\\n\\n  // Uploading files to the bucket\\n  s3.upload(params, function (err, data) {\\n    if (err) {\\n      throw err;\\n    }\\n    console.log(`File uploaded successfully. ${data.Location}`);\\n  });\\n};\\nuploadToS3(\\"your_image.jpg\\");\\n```\\n\\nIf you want to list all objects in your bucket, you can use S3 **listObjectsV2** function.\\n\\n```javascript\\n/**\\n * List all objects in the bucket\\n */\\ngetlist = async () => {\\n  const params = {\\n    Bucket: process.env.S3_BUCKET,\\n    Delimiter: \\"\\",\\n  };\\n  try {\\n    const response = await s3.listObjectsV2(params).promise();\\n    this.setState({\\n      list: response.Contents,\\n      fetched: true,\\n    });\\n    console.log(this.state.list);\\n  } catch (err) {\\n    this.setState({\\n      ifError: true,\\n      errorCode: err.code,\\n    });\\n    console.log(\\"S3 ERROR : \\" + err.code);\\n  }\\n};\\nconsloe.log(getlist());\\n```\\n\\nNow run your js file to see the result.\\n\\n```\\n$node app.js\\n```\\n\\n## Conclusion\\n\\nIn this blog, we created simple Node App and interact with our bucket. Nowadays, using a cloud storage service like AWS S3 is a very popular way to reduce storage pressure for servers as well as securly store user data.\\n\\n---\\n\\nReference: [AWS S3 Doc](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/s3-example-creating-buckets.html)"},{"id":"understand-copy-in-js","metadata":{"permalink":"/zh-cn/blog/understand-copy-in-js","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-04-14-copy-in-js.md","title":"Shallow Copy vs. Deep Copy","description":"question","date":"2021-04-14T00:00:00.000Z","formattedDate":"2021\u5e744\u670814\u65e5","tags":[{"label":"Javascript","permalink":"/zh-cn/blog/tags/javascript"},{"label":"Deep Copy","permalink":"/zh-cn/blog/tags/deep-copy"},{"label":"Shallow Copy","permalink":"/zh-cn/blog/tags/shallow-copy"}],"readingTime":3.475,"truncated":true,"authors":[{"name":"Haochen Qi","title":"Fullstack Developer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"prevItem":{"title":"How to Upload Files to AWS S3 in Node.js?","permalink":"/zh-cn/blog/upload-files-to-s3-iwth-node"},"nextItem":{"title":"Django project - A Twitter Like Web APP","permalink":"/zh-cn/blog/djang0-blog"}},"content":"![question](/img/question.jpg)\\nObjects are the basic blocks of JavaScript. An object is a collection of attributes, and an attribute is an association between a key (or name) and a value. Almost all objects in JavaScript are Object instances at the top of the prototype chain.\\n\\nWhen it comes to copying objects in JavaScript, you need to know whether you need to do a shallow copying or a deep copying. In this article, we will go through these two different ways to copy objects.\\n\\n\x3c!--truncate--\x3e\\n\\n## Shallow copy\\n\\n**Shallow copy**: When using the assignment operator to copy a reference variable to a new reference variable, a shallow copy of the referenced object will be created. In short, a reference variable mainly stores the address of the object it refers to. After assigning the value of the old reference variable to the new reference variable, copy the address stored in the old reference variable to the new reference variable. This means that both the old reference variable and the new reference variable point to the same object in memory. As a result, if the state of the object changes through any reference variable, both will be reflected. Let\'s see an example:\\n\\n```javascript\\nfunction example() {\\n  \\"use strict\\";\\n\\n  let obj1 = { a: 0, b: { c: 0 } };\\n  let obj2 = Object.assign({}, obj1);\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 0, \\"b\\": { \\"c\\": 0}}\\n\\n  obj1.a = 1;\\n  console.log(JSON.stringify(obj1)); // { \\"a\\": 1, \\"b\\": { \\"c\\": 0}}\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 0, \\"b\\": { \\"c\\": 0}}\\n\\n  obj2.a = 2;\\n  console.log(JSON.stringify(obj1)); // { \\"a\\": 1, \\"b\\": { \\"c\\": 0}}\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 2, \\"b\\": { \\"c\\": 0}}\\n\\n  obj1.b.c = 3;\\n  console.log(JSON.stringify(obj1)); // { \\"a\\": 1, \\"b\\": { \\"c\\": 3}}\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 2, \\"b\\": { \\"c\\": 3}}\\n}\\n\\nexample();\\n```\\n\\nAfter ES6 released, we can also use **spread operator** to shallow copy objects.\\n\\n```javascript\\nfunction example() {\\n  let obj1 = { a: 0, b: { c: 0 } };\\n  let obj2 = { ...obj1 };\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 0, \\"b\\": { \\"c\\": 0}}\\n  obj1.a = 4;\\n  obj1.b.c = 4;\\n  console.log(JSON.stringify(obj1)); // { \\"a\\": 4, \\"b\\": { \\"c\\": 4}}\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 0, \\"b\\": { \\"c\\": 4}}\\n}\\n\\nexample();\\n```\\n\\n## Deep copy\\n\\n**Deep copy**: Unlike shallow copy, deep copy copies all members of the old object, allocates a separate memory location for the new object, and then assigns the copied members to the new object. In this way, the two objects are independent of each other, and in the case of any modification to any one object, the other object is not affected. Similarly, if one of the objects is deleted, the other remains in memory. Now, to create a deep copy of the object in JavaScript, we use the JSON.parse() and JSON.stringify() methods. Let us see the example below.\\n\\n```javascript\\nfunction example() {\\n  let obj1 = { a: 0, b: { c: 0 } };\\n  let obj2 = JSON.parse(JSON.stringify(obj1));\\n  obj1.a = 4;\\n  obj1.b.c = 4;\\n  console.log(JSON.stringify(obj1)); // { \\"a\\": 4, \\"b\\": { \\"c\\": 4}}\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 0, \\"b\\": { \\"c\\": 0}}\\n}\\n\\nexample();\\n```\\n\\n## Use a JavaScript library to deep copy objects\\n\\nThere are several javascript libraries can provide objects operation utilities like **underscore** and **lodash**. In this article, we will introduce you how to use **lodash** to deep copy objects.\\n\\nLodash is a JavaScript library that provides multiple utility functions, and one of the most commonly used functions in the Lodash library is the cloneDeep() method. This method helps to clone objects in depth, and can also clone the limitations of the JSON.stringify() method, that is, non-serializable properties.\\n\\n```javascript\\nconst _ = require(\\"lodash\\");\\n\\nfunction example() {\\n  let obj1 = { a: 0, b: { c: 0 } };\\n  let obj2 = _.cloneDeep(obj1);\\n  obj1.a = 4;\\n  obj1.b.c = 4;\\n  console.log(JSON.stringify(obj1)); // { \\"a\\": 4, \\"b\\": { \\"c\\": 4}}\\n  console.log(JSON.stringify(obj2)); // { \\"a\\": 0, \\"b\\": { \\"c\\": 0}}\\n}\\n\\nexample();\\n```\\n\\n## Conclusion\\n\\nCopying objects in JavaScript can be quite daunting especially if you\u2019re new to JavaScript and don\u2019t know your way around the language. Hopefully this article helped you understand and avoid future pitfalls you may encounter copying objects.\\n\\n---\\n\\nReference: [MDN|Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)"},{"id":"djang0-blog","metadata":{"permalink":"/zh-cn/blog/djang0-blog","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-02-13-Django-blog.md","title":"Django project - A Twitter Like Web APP","description":"A twitter like web app built with Django.","date":"2021-02-13T00:00:00.000Z","formattedDate":"2021\u5e742\u670813\u65e5","tags":[{"label":"django","permalink":"/zh-cn/blog/tags/django"},{"label":"heroku","permalink":"/zh-cn/blog/tags/heroku"},{"label":"backend","permalink":"/zh-cn/blog/tags/backend"}],"readingTime":0.22,"truncated":true,"authors":[{"name":"Haochen Qi","title":"Fullstack Developer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"prevItem":{"title":"Shallow Copy vs. Deep Copy","permalink":"/zh-cn/blog/understand-copy-in-js"},"nextItem":{"title":"What is Web Accessibility?","permalink":"/zh-cn/blog/web-accessibility"}},"content":"A twitter like web app built with Django.\\n\\n\x3c!--truncate--\x3e\\n\\n## Description\\n\\nIn this app, you can register an account, login and update your profile picture, and post and manage your content. Try the demo [here](https://quiet-escarpment-41189.herokuapp.com/) with a testing account.\\n\\nUsername: TestUser\\n\\nPassword: testing321\\n\\n![screenshot](/files/django-blog.png)"},{"id":"web-accessibility","metadata":{"permalink":"/zh-cn/blog/web-accessibility","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-01-18-Web-Accessibility.md","title":"What is Web Accessibility?","description":"In this blog, we are going to learn web accessibility.","date":"2021-01-18T00:00:00.000Z","formattedDate":"2021\u5e741\u670818\u65e5","tags":[{"label":"Web Accessibility","permalink":"/zh-cn/blog/tags/web-accessibility"},{"label":"Web development","permalink":"/zh-cn/blog/tags/web-development"}],"readingTime":2.64,"truncated":true,"authors":[{"name":"Haochen Qi","title":"Fullstack Developer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"prevItem":{"title":"Django project - A Twitter Like Web APP","permalink":"/zh-cn/blog/djang0-blog"},"nextItem":{"title":"Cozy Space - A React Furniture Store","permalink":"/zh-cn/blog/React Furniture Store"}},"content":"In this blog, we are going to learn web accessibility.\\n\\n## What is Web Accessibility?\\n\\n> \\"The power of the Web is in its universality. Access by everyone regardless of disability is an essential aspect\\" - Tim Berners-Lee\\n\\nWeb accessibility is the concept that technology need to be equally accessible for people with and without disabilites. The Web is fundamentally designed to work for all people, whatever their hardware, software, language, location, or ability. When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability.\\n\\nThus the impact of disability is radically changed on the Web because the Web removes barriers to communication and interaction that many people face in the physical world. However, when websites, applications, technologies, or tools are badly designed, they can create barriers that exclude people from using the Web.\\n\\n\x3c!--truncate--\x3e\\n\\n## Who does Web Accessibility help?\\n\\nAccessibility supports social inclusion for people with disabilities as well as others, such as:\\n\\n- older people\\n- people in rural areas\\n- people in developing countries\\n\\nWeb accessibility encompasses all disabilities that affect access to the Web, including:\\n\\n- auditory\\n- cognitive\\n- \\\\*neurological\\n- physical\\n- speech\\n- visual\\n\\nWeb accessibility also benefits people without disabilities, for example:\\n\\n- people using mobile phones, smart watches, smart TVs, and other devices with small screens, different input modes, etc.\\n- older people with changing abilities due to ageing\\n- people with \u201ctemporary disabilities\u201d such as a broken arm or lost glasses\\n- people with \u201csituational limitations\u201d such as in bright sunlight or in an environment where they cannot listen to audio\\n- people using a slow Internet connection, or who have limited or expensive bandwidth\\n\\n## Why Web Accessability is important?\\n\\nThe Web is an increasingly important resource in many aspects of life: education, employment, government, commerce, health care, recreation, and more. It is essential that the Web be accessible in order to provide equal access and equal opportunity to people with diverse abilities. Access to information and communications technologies, including the Web, is defined as a basic human right in the United Nations Convention on the Rights of Persons with Disabilities (UN CRPD).\\n\\nThe Web offers the possibility of unprecedented access to information and interaction for many people with disabilities. That is, the accessibility barriers to print, audio, and visual media can be much more easily overcome through web technologies.\\n\\nThere is also a strong business case for accessibility. As shown in the previous section, accessible design improves overall user experience and satisfaction, especially in a variety of situations, across different devices, and for older users. Accessibility can enhance your brand, drive innovation, and extend your market reach.\\n\\nWeb accessibility is required by law in many situations.\\n\\n## Making the Web Accessible\\n\\nWeb accessibility depends on several components working together, including web technologies, web browsers and other \\"user agents\\", authoring tools, and websites.\\n\\nThe W3C Web Accessibility Initiative (WAI) develops technical specifications, guidelines, techniques, and supporting resources that describe accessibility solutions. These are considered international standards for web accessibility; for example, WCAG 2.0 is also an ISO standard: ISO/IEC 40500.\\n\\n---\\n\\nReference: [W3C Accessibility Fundamentals](https://www.w3.org/WAI/fundamentals/accessibility-intro/#what)"},{"id":"React Furniture Store","metadata":{"permalink":"/zh-cn/blog/React Furniture Store","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-01-04-react-store.md","title":"Cozy Space - A React Furniture Store","description":"A online furniture store built with React and React hooks(useReduce and useContext).","date":"2021-01-04T00:00:00.000Z","formattedDate":"2021\u5e741\u67084\u65e5","tags":[{"label":"react","permalink":"/zh-cn/blog/tags/react"},{"label":"contentful","permalink":"/zh-cn/blog/tags/contentful"},{"label":"furniture","permalink":"/zh-cn/blog/tags/furniture"}],"readingTime":0.215,"truncated":true,"authors":[{"name":"Haochen Qi","title":"Front End Developer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"prevItem":{"title":"What is Web Accessibility?","permalink":"/zh-cn/blog/web-accessibility"},"nextItem":{"title":"A Simple Recipe React App","permalink":"/zh-cn/blog/A_Simple_Recipe_React_App"}},"content":"A online furniture store built with React and React hooks(useReduce and useContext).\\n\\n\x3c!--truncate--\x3e\\n\\nDesign your dream home with our various morden furnitures.\\n\\nTry the demo [here](https://www.cozyspace.co).\\n\\n## Authentication with Auth0\\n\\nSimple sign up with your email or google account.\\n\\n## A ScreenShot\\n\\n![screenshot](/files/furniture-store.png)"},{"id":"A_Simple_Recipe_React_App","metadata":{"permalink":"/zh-cn/blog/A_Simple_Recipe_React_App","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2020-12-23-Recipe-app.md","title":"A Simple Recipe React App","description":"Find your favorite food recipe! Click here to try the demo.","date":"2020-12-23T00:00:00.000Z","formattedDate":"2020\u5e7412\u670823\u65e5","tags":[{"label":"react","permalink":"/zh-cn/blog/tags/react"},{"label":"receipe","permalink":"/zh-cn/blog/tags/receipe"},{"label":"EDAMAM","permalink":"/zh-cn/blog/tags/edamam"}],"readingTime":0.295,"truncated":true,"authors":[{"name":"Haochen Qi","title":"Front End Developer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"prevItem":{"title":"Cozy Space - A React Furniture Store","permalink":"/zh-cn/blog/React Furniture Store"},"nextItem":{"title":"My First Post","permalink":"/zh-cn/blog/first_blog"}},"content":"Find your favorite food recipe! Click [here](https://recipe-app.haochenq.vercel.app/) to try the demo.\\n\\n> Powered by EDAMAM\\n\\n\x3c!--truncate--\x3e\\n\\n## How to Use\\n\\nSearch by the food type like pizza, noodles or even the flavour of food you like!<br/>\\n\\nSimply type the keywords in the search bar and click the seach button, your receipe is on the way!\\n\\n## Screen shot\\n\\n![screenshot](/files/Recipe-hub.png)"},{"id":"first_blog","metadata":{"permalink":"/zh-cn/blog/first_blog","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2020-11-27-hi.md","title":"My First Post","description":"\u6b22\u8fce\u6765\u7684\u6211\u7684\u535a\u5ba2\u3002 This website is build with docusaurus.","date":"2020-11-27T00:00:00.000Z","formattedDate":"2020\u5e7411\u670827\u65e5","tags":[{"label":"react","permalink":"/zh-cn/blog/tags/react"},{"label":"docusaurus","permalink":"/zh-cn/blog/tags/docusaurus"}],"readingTime":0.07,"truncated":false,"authors":[{"name":"Haochen Qi","title":"Front End Engineer","url":"https://github.com/HaochenQ","imageURL":"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],"prevItem":{"title":"A Simple Recipe React App","permalink":"/zh-cn/blog/A_Simple_Recipe_React_App"}},"content":"\u6b22\u8fce\u6765\u7684\u6211\u7684\u535a\u5ba2\u3002 This website is build with docusaurus."}]}')}}]);