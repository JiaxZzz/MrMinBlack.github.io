<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/31/hello-world/"/>
      <url>2020/10/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐自己常用的几款IDEA插件</title>
      <link href="2019/11/05/%E6%8E%A8%E8%8D%90%E8%87%AA%E5%B7%B1%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E6%AC%BEIDEA%E6%8F%92%E4%BB%B6/"/>
      <url>2019/11/05/%E6%8E%A8%E8%8D%90%E8%87%AA%E5%B7%B1%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E6%AC%BEIDEA%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近项目比较忙，闲下来更新下IDEA汇总，今天给大家介绍下我在项目开发中常用的几款插件。IDEA强大的插件系统不仅可以提高我们的开发效率，并且很多的个性化设置，也能提现我们的与众不同。</p></blockquote><h1 id="简单说下安装方式"><a href="#简单说下安装方式" class="headerlink" title="简单说下安装方式"></a>简单说下安装方式</h1><p> 首先进入安装界面：</p><div class="tabs" id="no1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#no1-1">Mac</button></li><li class="tab"><button type="button" data-href="#no1-2">Windows</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="no1-1"><p><code>IntelliJ IDEA</code>-&gt;<code>Preferences</code>-&gt;<code>Plugins</code></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="no1-2"><p><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Plugins</code> </p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在输入框输入自己想要安装的插件名称，然后点击<code>install</code>即可</p><p><img src="http://res.vesal.site/minblack/222.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
            <tag> intellij idea Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你了解乐观锁和悲观锁吗</title>
      <link href="2019/06/11/%E4%BD%A0%E4%BA%86%E8%A7%A3%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%E5%90%97/"/>
      <url>2019/06/11/%E4%BD%A0%E4%BA%86%E8%A7%A3%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%E5%90%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 乐观锁、悲观锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常设计</title>
      <link href="2019/05/06/Java%E5%BC%82%E5%B8%B8%E8%AE%BE%E8%AE%A1/"/>
      <url>2019/05/06/Java%E5%BC%82%E5%B8%B8%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h1><p>在继续讲解下面部分之前，还是有必要了解下Java的异常分类的，通过Java API可以看到如下继承关系：</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/java%E5%BC%82%E5%B8%B8%E8%AE%BE%E8%AE%A1/936870-20170709120346087-1351539391.png"></p><p>简单介绍一点：</p><ul><li>Throwable是所有异常的父类</li><li>Error表示很严重的问题发生了，可以捕获但是不要捕获，因为捕获了也解决不了，这个不是由程序产出的，底层出现问题就让他它挂了吧。</li></ul><h1 id="如何选择异常类型"><a href="#如何选择异常类型" class="headerlink" title="如何选择异常类型"></a>如何选择异常类型</h1><h2 id="异常的类别"><a href="#异常的类别" class="headerlink" title="异常的类别"></a>异常的类别</h2><p>正如我们所知道的，java中的异常的超类是java.lang.Throwable(后文省略为Throwable),它有两个比较重要的子类,java.lang.Exception和java.lang.Error，其中Error由JVM虚拟机进行管理,如我们所熟知的OutOfMemoryError异常等，所以我们本文不关注Error异常，那么我们细说一下Exception异常。<br>Exception异常有个比较重要的子类，叫做RuntimeException。我们将RuntimeException或其他继承自RuntimeException的子类称为非受检异常(unchecked Exception)，其他继承自Exception异常的子类称为受检异常(checked Exception)。我们重点来关注一下受检异常和非受检异常这两种异常。</p><h2 id="如何选择异常"><a href="#如何选择异常" class="headerlink" title="如何选择异常"></a>如何选择异常</h2><p>如果在一个应用中，需要开发一个方法(如某个功能的service方法)，这个方法如果中间可能出现异常，那么你需要考虑这个异常出现之后是否调用者可以处理，并且你是否希望调用者进行处理，如果调用者可以处理，并且你也希望调用者进行处理，那么就要抛出受检异常，提醒调用者在使用你的方法时，考虑到如果抛出异常时如果进行处理，相似的，如果在写某个方法时，你认为这是个偶然异常，理论上说，你觉得运行时可能会碰到什么问题，而这些问题也许不是必然发生的，也不需要调用者显示的通过异常来判断业务流程操作的，那么这时就可以使用一个RuntimeException这样的非受检异常.</p><h2 id="什么时候才需要抛异常"><a href="#什么时候才需要抛异常" class="headerlink" title="什么时候才需要抛异常"></a>什么时候才需要抛异常</h2><p>首先我们需要了解一个问题，什么时候才需要抛异常？异常的设计是方便给开发者使用的，但不是乱用的，笔者对于什么时候抛异常这个问题也问了很多朋友，能给出准确答案的确实不多。其实这个问题很简单，如果你觉得某些”问题”解决不了了，那么你就可以抛出异常了。比如，你在写一个service,其中在写到某段代码处,你发现可能会产生问题，那么就请抛出异常吧，相信我，你此时抛出异常将是一个最佳时机。</p><h2 id="应该抛出怎样的异常"><a href="#应该抛出怎样的异常" class="headerlink" title="应该抛出怎样的异常"></a>应该抛出怎样的异常</h2><p>了解完了什么时候才需要抛出异常后，我们再思考一个问题，真的当我们抛出异常时，我们应该选用怎样的异常呢？究竟是受检异常还是非受检异常呢(RuntimeException)呢？我来举例说明一下这个问题，先从受检异常说起,比如说有这样一个业务逻辑，需要从某文件中读取某个数据，这个读取操作可能是由于文件被删除等其他问题导致无法获取从而出现读取错误，那么就要从数据库中再去获取此数据,参考如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    String value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream fileInputStream = getFileInputStream(<span class="string">&quot;/file&quot;</span>);</span><br><span class="line">        value = ...;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        value = ...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getFileInputStream</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;IO 读取错误&quot;</span>, e.getCause());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inputStream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从以上代码可以看出，受检异常可以控制义务逻辑，但是切记不要这样使用，我们应该合理的抛出异常，因为程序本身才是流程，异常的作用仅仅是当你进行不下去的时候找到的一个借口而已，它并不能当成控制程序流程的入口或出口，如果这样使用的话，是在将异常的作用扩大化，这样将会导致代码复杂程度的增加，耦合性会提高，代码可读性降低等问题。那么就一定不要使用这样的异常吗？其实也不是，在真的有这样的需求的时候，我们可以这样使用，只是切记，不要把它真的当成控制流程的工具或手段。那么究竟什么时候才要抛出这样的异常呢？要考虑，如果调用者调用出错后，一定要让调用者对此错误进行处理才可以，满足这样的要求时，我们才会考虑使用受检异常。<br>接下来，我们来看一下非受检异常呢(RuntimeException)，对于RuntimeException这种异常，我们其实很多见，比如java.lang.NullPointerException／java.lang.IllegalArgumentException等，那么这种异常我们时候抛出呢？当我们在写某个方法的时候，可能会偶然遇到某个错误，我们认为这个问题时运行时可能为发生的，并且理论上讲，没有这个问题的话，程序将会正常执行的时候，它不强制要求调用者一定要捕获这个异常，此时抛出RuntimeException异常,举个例子，当传来一个路径的时候，需要返回一个路径对应的File对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getFiles</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(path)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;路径为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述例子表明，如果调用者调用getFiles(String)的时候如果path是空，那么就抛出空指针异常(它是RuntimeException的子类),调用者不用显示的进行try…catch…操作进行强制处理.这就要求调用者在调用这样的方法时先进行验证，避免发生RuntimeException</p><h2 id="应该选用哪种异常"><a href="#应该选用哪种异常" class="headerlink" title="应该选用哪种异常"></a>应该选用哪种异常</h2><p>通过以上的描述和举例，可以总结出一个结论，RuntimeException异常和受检异常之间的区别就是:是否强制要求调用者必须处理此异常，如果强制要求调用者必须进行处理，那么就使用受检异常，否则就选择非受检异常(RuntimeException)。一般来讲，如果没有特殊的要求，我们建议使用RuntimeException异常。</p><p>只抛出RuntimeException就算是优雅的抛出异常吗？当然不是，对于service中的抛出异常，笔者认为大致有两种抛出的方法:</p><ul><li><p>抛出带状态码RumtimeException异常</p></li><li><p>抛出指定类型的RuntimeException异常</p></li></ul><p>相对这两种异常的方式进行结束，第一种异常指的是我所有的异常都抛RuntimeException异常，但是需要带一个状态码，调用者可以根据状态码再去查询究竟service抛出了一个什么样的异常。</p><p>第二种异常是指在service中抛出什么样的异常就自定义一个指定的异常错误，然后在进行抛出异常。</p><p>一般来讲，如果系统没有别的特殊需求的时候，在开发设计中，建议使用第二种方式。但是比如说像基础判断的异常，就可以完全使用guava给我们提供的类库进行操作。jsr 303异常也可以使用自己封装好的异常判断类进行操作，因为这两种异常都是属于基础判断，不需要为它们指定特殊的异常。但是对于第三点义务条件约束判断抛出的异常，就需要抛出指定类型的异常了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;找不到当前用户!&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义一个特定的异常类来进行这个义务异常的判断:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFindUserException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NotFindUserException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">&quot;找不到此用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NotFindUserException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将此处改为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException(<span class="string">&quot;找不到当前用户!&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException();</span><br></pre></td></tr></table></figure><h1 id="api异常设计"><a href="#api异常设计" class="headerlink" title="api异常设计"></a>api异常设计</h1><p>大致有两种抛出的方法:</p><ul><li><p>抛出带状态码RumtimeException异常</p></li><li><p>抛出指定类型的RuntimeException异常</p></li></ul><p>这个是在设计service层异常时提到的，通过对service层的介绍，我们在service层抛出异常时选择了第二种抛出的方式，不同的是，在api层抛出异常我们需要使用这两种方式进行抛出:要指定api异常的类型，并且要指定相关的状态码，然后才将异常抛出，这种异常设计的核心是让调用api的使用者更能清楚的了解发生异常的详细信息，除了抛出异常外，我们还需要将状态码对应的异常详细信息以及异常有可能发生的问题制作成一个对应的表展示给用户，方便用户的查询。（如github提供的api文档，微信提供的api文档等）,还有一个好处:如果用户需要自定义提示消息，可以根据返回的状态码进行提示的修改。</p><h2 id="api验证约束"><a href="#api验证约束" class="headerlink" title="api验证约束"></a>api验证约束</h2><p>首先对于api的设计来说，需要存在一个dto对象，这个对象负责和调用者进行数据的沟通和传递，然后dto-&gt;domain在传给service进行操作，这一点一定要注意，第二点，除了说道的service需要进行基础判断(null判断)和jsr 303验证以外，同样的，api层也需要进行相关的验证，如果验证不通过的话，直接返回给调用者，告知调用失败，不应该带着不合法的数据再进行对service的访问，那么读者可能会有些迷惑，不是service已经进行验证了，为什么api层还需要进行验证么？这里便设计到了一个概念:编程中的墨菲定律，如果api层的数据验证疏忽了，那么有可能不合法数据就带到了service层，进而讲脏数据保存到了数据库。</p><p><strong>所以缜密编程的核心是:永远不要相信收到的数据是合法的。</strong></p><h2 id="api异常设计-1"><a href="#api异常设计-1" class="headerlink" title="api异常设计"></a>api异常设计</h2><p>设计api层异常时，正如我们上边所说的，需要提供错误码和错误信息，那么可以这样设计，提供一个通用的api超类异常，其他不同的api异常都继承自这个超类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">9026920502870466217L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_ERROR_CODE = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> errorCode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = DEFAULT_ERROR_CODE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(throwable);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = DEFAULT_ERROR_CODE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(String message, <span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(String message, <span class="keyword">int</span> errorCode, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, throwable);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后分别定义api层异常：ApiDefaultAddressNotDeleteException,ApiNotFindAddressException,ApiNotFindUserException,ApiNotMatchUserAddressException。</p><p>以默认地址不能删除为例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiDefaultAddressNotDeleteException</span> <span class="keyword">extends</span> <span class="title">ApiException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiDefaultAddressNotDeleteException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(AddressErrorCode.DefaultAddressNotDeleteErrorCode, message, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AddressErrorCode.DefaultAddressNotDeleteErrorCode就是需要提供给调用者的错误码。错误码类如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressErrorCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DefaultAddressNotDeleteErrorCode = <span class="number">10001</span>;<span class="comment">//默认地址不能删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NotFindAddressErrorCode = <span class="number">10002</span>;<span class="comment">//找不到此收货地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NotFindUserErrorCode = <span class="number">10003</span>;<span class="comment">//找不到此用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NotMatchUserAddressErrorCode = <span class="number">10004</span>;<span class="comment">//用户与收货地址不匹配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ok,那么api层的异常就已经设计完了，在此多说一句，AddressErrorCode错误码类存放了可能出现的错误码，更合理的做法是把他放到配置文件中进行管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TextProperties.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEXT_PROPERTIES_FILE=<span class="string">&quot;text.properties&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TextProperties _insstance = <span class="keyword">new</span> TextProperties();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TextProperties <span class="title">instance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _insstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Properties properties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TextProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">this</span>.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; resources = <span class="keyword">this</span>.getClass().getClassLoader().getResources(TEXT_PROPERTIES_FILE);</span><br><span class="line"><span class="keyword">while</span>(resources.hasMoreElements())&#123;</span><br><span class="line">URL url = resources.nextElement();</span><br><span class="line">InputStream in = url.openStream();</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">properties.load(isr);</span><br><span class="line">isr.close();</span><br><span class="line">in.close();</span><br><span class="line">logger.info(<span class="string">&quot;load text properties from &#123;&#125;&quot;</span>, url.toString());</span><br><span class="line"><span class="comment">//System.out.println(&quot;load text properties from:&quot; + url.toString());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.warn(<span class="string">&quot;TextProperties.read exception&quot;</span>, e);</span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties.getProperty(String.valueOf(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>text.properties内容如下:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10001&#x3D;默认地址不能删除</span><br><span class="line">10002&#x3D;找不到此收货地址</span><br><span class="line">10003&#x3D;找不到此用户</span><br><span class="line">10004&#x3D;用户与收货地址不匹配</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiExceptionBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApiException <span class="title">create</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiException(ErrorCodeConfig.instance().get(errorCode), errorCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="api处理异常"><a href="#api处理异常" class="headerlink" title="api处理异常"></a>api处理异常</h2><p>api层会调用service层，然后来处理service中出现的所有异常，首先，需要保证一点，一定要让api层非常轻，基本上做成一个转发的功能就好(接口参数，传递给service参数，返回给调用者数据,这三个基本功能)，然后就要在传递给service参数的那个方法调用上进行异常处理。</p><p>此处仅以添加地址为例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAddressService addressService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加收货地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> addressDTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AddressDTO <span class="title">add</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> AddressDTO addressDTO)</span></span>&#123;</span><br><span class="line">    Address address = <span class="keyword">new</span> Address();</span><br><span class="line">    BeanUtils.copyProperties(addressDTO,address);</span><br><span class="line">    Address result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = addressService.createAddress(addressDTO.getUid(), address);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NotFindUserException e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApiNotFindUserException(<span class="string">&quot;找不到该用户&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;<span class="comment">//未知错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApiException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    AddressDTO resultDTO = <span class="keyword">new</span> AddressDTO();</span><br><span class="line">    BeanUtils.copyProperties(result,resultDTO);</span><br><span class="line">    resultDTO.setUid(result.getUser().getId());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resultDTO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的处理方案是调用service时，判断异常的类型，然后将任何service异常都转化成api异常，然后抛出api异常，这是常用的一种异常转化方式。相似删除收货地址和获取收货地址也类似这样处理，在此，不在赘述。</p><h2 id="api异常转化"><a href="#api异常转化" class="headerlink" title="api异常转化"></a>api异常转化</h2><p>已经讲解了如何抛出异常和何如将service异常转化为api异常，那么转化成api异常直接抛出是否就完成了异常处理呢？ 答案是否定的，当抛出api异常后，我们需要把api异常返回的数据(json or xml)让用户看懂，那么需要把api异常转化成dto对象(ErrorDTO),看如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = RestController.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiExceptionHandlerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle exceptions thrown by handlers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorDTO&gt; <span class="title">exception</span><span class="params">(Exception exception,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    ErrorDTO errorDTO = <span class="keyword">new</span> ErrorDTO();</span><br><span class="line">    <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> ApiException)&#123;<span class="comment">//api异常</span></span><br><span class="line">        ApiException apiException = (ApiException)exception;</span><br><span class="line">        errorDTO.setErrorCode(apiException.getErrorCode());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//未知异常</span></span><br><span class="line">        errorDTO.setErrorCode(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    errorDTO.setTip(exception.getMessage());</span><br><span class="line">    ResponseEntity&lt;ErrorDTO&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(errorDTO,HttpStatus.valueOf(response.getStatus()));</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorDTO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errorCode;</span><br><span class="line">    <span class="keyword">private</span> String tip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ok,这样就完成了api异常转化成用户可以读懂的DTO对象了，代码中用到了@ControllerAdvice，这是spring MVC提供的一个特殊的切面处理。</p><p>当调用api接口发生异常时，用户也可以收到正常的数据格式了,比如当没有用户(uid为2)时，却为这个用户添加收货地址,postman之后的数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;errorCode&quot;</span>: <span class="number">10003</span>,</span><br><span class="line">  <span class="attr">&quot;tip&quot;</span>: <span class="string">&quot;找不到该用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文只从如何设计异常作为重点来讲解，涉及到的api传输和service的处理，还有待优化，比如api接口访问需要使用https进行加密，api接口需要OAuth2.0授权或api接口需要签名认证等问题，文中都未曾提到，本文的重心在于异常如何处理，所以读者只需关注涉及到异常相关的问题和处理方式就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
            <tag> java程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于jsoup的爬虫实现</title>
      <link href="2019/04/11/%E5%9F%BA%E4%BA%8Ejsoup%E7%9A%84%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/04/11/%E5%9F%BA%E4%BA%8Ejsoup%E7%9A%84%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以前只是觉得Py可以实现爬虫，没想到java也可以轻松实现爬虫功能。Jsoup是一款基于java的爬虫框架，可以像Jquery一样对dom进行操作</p></blockquote><h4 id="使用jsoup大概也就以下几个步骤："><a href="#使用jsoup大概也就以下几个步骤：" class="headerlink" title="使用jsoup大概也就以下几个步骤："></a>使用jsoup大概也就以下几个步骤：</h4><ol><li>获取整个html文档</li><li>使用选择器获取需要爬的数据节点集合</li><li>循环遍历使用选择器获取相应数据</li></ol><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.11.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="下面我们以爬取起点中文小说为例"><a href="#下面我们以爬取起点中文小说为例" class="headerlink" title="下面我们以爬取起点中文小说为例"></a>下面我们以爬取起点中文小说为例</h4><p><a href="https://book.qidian.com/info/1012943264#Catalog">https://book.qidian.com/info/1012943264#Catalog</a></p><p>主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Jiax</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: http工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2019/3/28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient okHttpClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">                .readTimeout(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .connectTimeout(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接客户端</span></span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(path)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建&quot;调用&quot; 对象</span></span><br><span class="line">        Call call = okHttpClient.newCall(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = call.execute();<span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="keyword">return</span> response.body().string();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链接格式有误:&quot;</span> + path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Jiax</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 爬取逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2019/3/28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 目标地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllLinks</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        Document doc = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doc = Jsoup.parse(HttpUtils.get(url));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//接收到错误链接（404页面;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; urlList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Elements urlNodes = doc.select(<span class="string">&quot;ul.cf li a&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element urlNode : urlNodes) &#123;</span><br><span class="line">            urlList.add(<span class="string">&quot;https:&quot;</span>+urlNode.attr(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        CrawTextThread crawTextThread = <span class="keyword">new</span> CrawTextThread(urlList);</span><br><span class="line">        crawTextThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span>: Jiax</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 多线程写入</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span>: Created in 2019/4/3</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrawTextThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String localDir = <span class="string">&quot;D:\\Spider\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建文件</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(File fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!fileName.exists()) &#123;</span><br><span class="line">              fileName.createNewFile();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 写入文本</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileName 文件类</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> content  要写入的文本</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeTxtFile</span><span class="params">(File fileName, String content)</span> </span>&#123;</span><br><span class="line">      FileOutputStream o = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          o = <span class="keyword">new</span> FileOutputStream(fileName);</span><br><span class="line">          o.write(content.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">          o.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CrawTextThread</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.list = list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      currentThread().setName(<span class="string">&quot;线程:&quot;</span>+<span class="keyword">new</span> Random().toString());</span><br><span class="line">      <span class="keyword">for</span> (String url : list) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              System.out.println((<span class="string">&quot;url：&quot;</span> + url));</span><br><span class="line">              Document document = Jsoup.connect(url).timeout(<span class="number">6000</span>).get();</span><br><span class="line">              String title = document.getElementsByClass(<span class="string">&quot;j_chapterName&quot;</span>).text();</span><br><span class="line">              String content = document.getElementsByClass(<span class="string">&quot;read-content j_readContent&quot;</span>).text();</span><br><span class="line"></span><br><span class="line">              File file = <span class="keyword">new</span> File(localDir + title + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">              createFile(file);</span><br><span class="line">              System.out.println((<span class="string">&quot;本地目录：&quot;</span> + localDir + title));</span><br><span class="line">              writeTxtFile(file, FileterHtml(content));</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">FileterHtml</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> str.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;&lt;br&gt;&quot;</span>, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.list = list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最后我们执行代码"><a href="#最后我们执行代码" class="headerlink" title="最后我们执行代码"></a>最后我们执行代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Jiax</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2019/4/10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpriderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String link = <span class="string">&quot;https://book.qidian.com/info/1012943264#Catalog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Spider.getAllLinks(link);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E5%9F%BA%E4%BA%8Ejsoup%E7%9A%84%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0/spider.png"></p><h3 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h3><p><a href="https://gitee.com/jiaxZz/SpiderDemo">https://gitee.com/jiaxZz/SpiderDemo</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsoup </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vagrant系列(1)</title>
      <link href="2019/01/31/vagrant%E7%B3%BB%E5%88%97(1)/"/>
      <url>2019/01/31/vagrant%E7%B3%BB%E5%88%97(1)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Vagrant是一款用来构建虚拟开发环境的外挂工具，可以简化虚拟机配置和管理。它底层支持VirtualBox、VMware、AWS等，非常适合使用php/python/ruby/java语言开发web应用，“代码在我机子上运行没有问题”这种说辞将成为历史。</p></blockquote><h2 id="1-安装VirtualBox"><a href="#1-安装VirtualBox" class="headerlink" title="1. 安装VirtualBox"></a>1. 安装VirtualBox</h2><p>去官网<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a> 下载最新版的Virtualbox，然后双击安装，一直点击确认完成。</p><h2 id="2-安装Vagrant"><a href="#2-安装Vagrant" class="headerlink" title="2. 安装Vagrant"></a>2. 安装Vagrant</h2><p>去官网 <a href="https://www.vagrantup.com/downloads.html">https://www.vagrantup.com/downloads.html</a> 下载最新版的Vagrant，然后双击安装，一直点击确认完成。在windows下安装vagrant，为了写入相应配置到环境变量，系统可能会要求重新启动。在命令行中，输入vagrant，查看程序是不是已经运行了。如果不行，请检查一下$PATH里面是否包含vagrant所在的路径 </p><h2 id="3-Vagrant命令详解"><a href="#3-Vagrant命令详解" class="headerlink" title="3. Vagrant命令详解"></a>3. Vagrant命令详解</h2><table><thead><tr><th align="center">命令</th><th>作用</th></tr></thead><tbody><tr><td align="center">vagrant box add</td><td>添加box的操作</td></tr><tr><td align="center">vagrant init</td><td>初始化box的操作，会生成vagrant的配置文件Vagrantfile</td></tr><tr><td align="center">vagrant up</td><td>启动本地环境</td></tr><tr><td align="center">vagrant ssh</td><td>通过ssh登录本地环境所在虚拟机</td></tr><tr><td align="center">vagrant halt</td><td>关闭本地环境</td></tr><tr><td align="center">vagrant suspend</td><td>暂停本地环境</td></tr><tr><td align="center">vagrant resume</td><td>恢复本地环境</td></tr><tr><td align="center">vagrant reload</td><td>修改了Vagrantfile后，使之生效（相当于先 halt，再 up）</td></tr><tr><td align="center">vagrant destroy</td><td>彻底移除本地环境</td></tr><tr><td align="center">vagrant box list</td><td>显示当前已经添加的box列表</td></tr><tr><td align="center">vagrant box remove</td><td>删除相应的box</td></tr><tr><td align="center">vagrant package</td><td>打包命令，可以把当前的运行的虚拟机环境进行打包</td></tr><tr><td align="center">vagrant plugin</td><td>用于安装卸载插件</td></tr><tr><td align="center">vagrant status</td><td>获取当前虚拟机的状态</td></tr><tr><td align="center">vagrant global-status</td><td>显示当前用户Vagrant的所有环境状态</td></tr></tbody></table><h2 id="4-使用Vagrant安装配置虚拟机"><a href="#4-使用Vagrant安装配置虚拟机" class="headerlink" title="4. 使用Vagrant安装配置虚拟机"></a>4. 使用Vagrant安装配置虚拟机</h2><h2 id="4-1-box是什么？"><a href="#4-1-box是什么？" class="headerlink" title="4.1 box是什么？"></a>4.1 box是什么？</h2><p>接下来，我们需要选择使用何种操作系统，这里以centos7.2为例。以前基于虚拟机的工作流，我们需要下载ISO镜像，安装系统，设置系统等操作。而Vagrant开源社区提供了许多已经打包好的操作系统，我们称之为box。你可以从box下载地址（下文列出），找到你想要的box，当然你也可以自己制作一个。</p><ul><li>官方仓库：<a href="https://atlas.hashicorp.com/boxes/search">https://atlas.hashicorp.com/boxes/search</a></li><li>官方镜像：<a href="https://vagrantcloud.com/boxes/search">https://vagrantcloud.com/boxes/search</a></li><li>第三方仓库：<a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a> </li></ul><h2 id="4-2-如何安装一个box？"><a href="#4-2-如何安装一个box？" class="headerlink" title="4.2 如何安装一个box？"></a>4.2 如何安装一个box？</h2><p>我们需要建立自己的开发环境目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /Users/jackyue/data/vagrant/centos7</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /Users/jackyue/data/vagrant/centos7</span><br></pre></td></tr></table></figure><p>Vagrant提供在线安装服务，非常方便，但由于伟大的GFW，我们需要先FQ把box下载到本地，然后导入安装。box链接  <a href="https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box">https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/centos-7.0-x86_64.box</a></p><p>以下是导入安装说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add &#123;title&#125; &#123;url&#125;</span><br><span class="line">   </span><br><span class="line">$ vagrant init &#123;title&#125;</span><br><span class="line">    </span><br><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure><p><code>vagrant box add</code>是添加box的命令，｛title｝是以后创建虚拟机的别名，｛url｝是下载到本地box的路径，也可以是服务器端的URL。</p><p>说明：将box镜像添加到本地仓库，有三种方式：</p><ul><li> 使用http绝对地址</li></ul><p><code>vagrant box add precises64 http://files.vagrantup.com/precise64.box</code></p><ul><li>使用本地文件（从协议来说，和上面一样，相当于file:///协议的地址)</li></ul><p><code>vagrant box add precises64 ./precise64.box</code></p><ul><li>使用仓库名称</li></ul><p><code> vagrant box add precises64 ubuntu/precise64 </code></p><p>  这种方式，vagrant会自动在中央仓库查找镜像，并下载到本地镜像库中。</p><p><code>vagrant box add ubuntu/precise64</code></p><p>省略本地镜像名称，则直接用中央仓库中的镜像名作为本地镜像名，这样做的好处是可以跟仓库中的镜像对应</p><h2 id="4-3-安装centos7-box"><a href="#4-3-安装centos7-box" class="headerlink" title="4. 3 安装centos7 box"></a>4. 3 安装centos7 box</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/jackyue/data/vagrant/centos7     //找到一个目录，作为初始化目录</span><br><span class="line">    </span><br><span class="line">$ vagrant box add centos7 /Users/jackyue/data/vagrant/centos/centos-7.0-x86_64.box       //建议采取离线安装，这样有利于放置虚拟机文件到指定路径</span><br><span class="line">    </span><br><span class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">==&gt; box: Adding box <span class="string">&#x27;centos7&#x27;</span> (v0) <span class="keyword">for</span> provider: </span><br><span class="line">    box: Unpacking necessary files from: file:///Users/jackyue/data/vagrant/vagrant-centos-7.2.box</span><br><span class="line">==&gt; box: Successfully added box <span class="string">&#x27;centos7&#x27;</span> (v0) <span class="keyword">for</span> <span class="string">&#x27;virtualbox&#x27;</span>!</span><br></pre></td></tr></table></figure><p>box中的镜像文件被放到了/Users/jackyue/data/vagrant/.vagrant/machines/之下 </p><p>初始化成功后，vagrant会在当前的初始化目录生成一个Vagrantfile配置文件，我们可以修改它，进行个性化定制。在下一篇文章中，我们会具体讲解关于Vagrantfile的配置。对于Vagrantfile文件，我们可以直接编写，或者从网络上拉取Vagrantfile文件后，作为虚拟机配置文件，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/vm/coreos</span><br><span class="line">    </span><br><span class="line">$ <span class="built_in">cd</span> ~/vm/coreos</span><br><span class="line">    </span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/coreos/coreos-vagrant.git</span><br></pre></td></tr></table></figure><h2 id="4-5-启动系统"><a href="#4-5-启动系统" class="headerlink" title="4.5 启动系统"></a>4.5 启动系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up </span><br><span class="line">    </span><br><span class="line">// 第一次开启的时候，建议一台一台地开启，这样的话方便记录映射的本地端口号</span><br><span class="line">    </span><br><span class="line">Bringing machine <span class="string">&#x27;default&#x27;</span> up with <span class="string">&#x27;virtualbox&#x27;</span> provider...</span><br><span class="line">==&gt; default: Importing base box <span class="string">&#x27;centos7&#x27;</span>...</span><br><span class="line">==&gt; default: Matching MAC address <span class="keyword">for</span> NAT networking...</span><br><span class="line">==&gt; default: Setting the name of the VM: centos7_default_1493108555390_12825</span><br><span class="line">==&gt; default: Clearing any previously <span class="built_in">set</span> network interfaces...</span><br></pre></td></tr></table></figure><h2 id="4-6-SSH连接安装的虚拟机"><a href="#4-6-SSH连接安装的虚拟机" class="headerlink" title="4.6 SSH连接安装的虚拟机"></a>4.6 SSH连接安装的虚拟机</h2><p>经过以上操作后，我们完成了centos7虚拟机的安装，现在需要登录虚拟机，进行操作，有以下三种方式：</p><ul><li>在开发环境的目录（有Vagrantfile的地方），登录虚拟机</li></ul><p><code>$ vagrant ssh</code></p><ul><li>使用第三方工具，如secureCRT）或系统ssh命令进行登录，IP为Vagrantfile中指定的hostonly地 </li></ul><p>址，用户名与密码默认都是vagrant</p><ul><li>在宿主机的命令行，ssh到本地端口的方式登录。观察客户机的22端口映射到宿主机的是多少，一般是</li></ul><p>2200或者2222，用户名与密码默认都是vagrant</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 2222 127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="5-打包分发"><a href="#5-打包分发" class="headerlink" title="5. 打包分发"></a>5. 打包分发</h2><p>当你配置好开发环境后，退出并关闭虚拟机。在终端里，对虚拟机打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vagrant halt         // 在开发环境的目录，关闭centos7</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># vagrant status       // 确认centos7关机</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># vagrant package centos7 --output  centos7.box  --vagrantfile Vagrantfile</span></span><br><span class="line">    </span><br><span class="line">// --output NAME:(可选)设置通过NAME来指定输出的文件名；--vagrantfile FILE:(可选)将Vagrantfile直接封进box中</span><br></pre></td></tr></table></figure><p>注：如果网络模式中使用private_network的话，在打包之前需要清除一下private_network的设置，避免不必要的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/udev/rule.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure><p>打包完成后会在当前目录生成一个centos7.box的文件，将这个文件分发给其他用户（开发者）。</p><p>其他用户只要添加这个 box ，并用其初始化自己的开发目录，就能得到一个一模一样的开发环境了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vagrant box add centos7 centos7.box       </span></span><br><span class="line">    </span><br><span class="line">//添加package.box，镜像命名为centos7</span><br><span class="line">    </span><br><span class="line">$ vagrant init centos7      </span><br><span class="line">    </span><br><span class="line">// 初始化centos7镜像</span><br><span class="line">    </span><br><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vagrant </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你们都在用IDEA吗</title>
      <link href="2018/09/17/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E7%94%A8IDEA%E5%90%97/"/>
      <url>2018/09/17/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E7%94%A8IDEA%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>“工欲善其事必先利其器”，IntelliJ IDEA作为一个非常好用的工具，他的神奇之处真的很多很多，掌握了这款idea的技巧之后，开发效率至少提升两倍以上，而且对一些英语不好的学习者也是非常友好，这篇文章详细的介绍了常用快捷键以及一些非常实用的小工具，感兴趣的小伙伴们赶快来学习。</p></blockquote><p> 熟练掌握这些操作，编码速度与质量一定能得到一个质的飞跃。</p><h2 id="一、视图查看"><a href="#一、视图查看" class="headerlink" title="一、视图查看"></a><strong>一、视图查看</strong></h2><p><code>Ctrl+F12</code> 查看file，method结构图、类继承机构图（不知道方法结构，<code>Ctrl+F12</code> 一下，方法，参数，返回值，一清二楚的展现出来）</p><p><code>Ctrl+shift+Alt+U</code>   查看maven依赖，类图</p><p>使用maven做项目时，依赖往往非常多，在配置依赖的文件中只需要<code>Ctrl+shift+Alt+U</code>，所有依赖都以拓扑图的方式展现出来，所有的关系和位置都能找到。</p><p>如下图（抱歉，项目依赖太多，具体的依赖需要放大）</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/640.webp" alt="视图"></p><p>类图：我们阅读源码的时候，想知道各个类之间的关系怎么办，<code>Ctrl+shift+Alt+U</code>，所有依赖都以拓扑图的方式展现出来，所有的关系和位置都能找到，以ArrayList为例。</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/002.webp"></p><p><code>Ctrl＋Alt+H</code>   查看方法调用层次。</p><h2 id="二、定位"><a href="#二、定位" class="headerlink" title="二、定位"></a><strong>二、定位</strong></h2><p><strong>1、项目之间的跳转</strong></p><p><code>Ctrl+Alt+[</code>　　跳转到下一个项目</p><p><code>Ctrl+Alt+]</code>　　跳转到上一个项目</p><p><strong>2、文件之间的跳转</strong></p><p><code>Ctrl+E</code>　　 定位到最近浏览过的文件 </p><p><code>Ctrl+Shift+E</code>　　最近更改的文件</p><p><code>Shift+Click</code>　　可以关闭文件</p><p><strong>3、位置的跳转</strong></p><p><code>Ctrl+Shift+Backspace</code>　　 跳转上一次修改的地方</p><p><code>Ctrl+Alt+B</code>　　跳转到方法实现处</p><p><code>Ctrl+Shift+左箭头</code>　　上一个浏览的地方</p><p><code>Ctrl+Shift+右箭头</code>　　下一个浏览的地方</p><p><strong>4、其他的跳转</strong></p><p><code>Ctrl+H</code>　　显示类结构图（类的继承层次）</p><p><code>Ctrl+Q</code>　　显示注释文档</p><p><code>Alt+1</code>　　快速打开或隐藏工程面板</p><p><code>Alt+left/right</code>　　切换代码视图</p><p><code>F2</code> 或 <code>Shift+F2</code>　　高亮错误或警告快速定位</p><p><code>Tab</code>　　代码标签输入完成后，按<code>Tab</code>，生成代码</p><p><code>Ctrl+Shift+F7</code>　　高亮显示所有该文本，按 Esc 高亮消失</p><p><strong>5、搜索</strong></p><p><code>Ctrl＋N</code>　　快速搜索类</p><p><code>Ctrl＋Shift＋N</code>　　快速搜索文件</p><p><code>Ctrl＋Alt+Shift＋N</code>　　快速搜索函数</p><p>三个里面都有Include non-porjecct items选项，勾选则表示非当前文件中的jar里面所有的类也会被查找。</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/003.webp"></p><p><code>Ctrl+Shift+F</code>　　快速搜索字符串</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/004.webp"></p><p><code>Alt+F1</code>　　查找代码所在位置</p><p><code>Alt+F3</code>　　逐个往下查找相同文本，并高亮显示</p><p><strong>6、光标移动和选中</strong></p><p><code>Ctrl＋Alt+Shift＋J</code> 选中所有相应的目标</p><p><code>Alt+Up/Down</code>　　在方法间快速移动定位</p><p><code>Ctrl+Shift+Up/Down</code>　　向上/下移动语句</p><p><code>Ctrl+Up/Down</code>　　光标中转到第一行或最后一行下</p><p><code>Ctrl+B</code>/<code>Ctrl+Click</code>　　快速打开光标处的类或方法（跳转到定义处）</p><h2 id="三、Alt-Enter"><a href="#三、Alt-Enter" class="headerlink" title="三、Alt+Enter"></a><strong>三、Alt+Enter</strong></h2><p>虽然只用一个组合按键，但是它的作用非常大</p><p><strong>1、提供代码提示</strong></p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/005.webp"></p><p>代码报错只要<code>alt+Enter</code>一下，他就为我们提供了好了解决方案。</p><p><strong>2、自动创建函数</strong></p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/006.webp"></p><p>只要写好函数名称，<code>Alt+Enter</code>一下，它就能帮我们自动创建好函数。</p><p><strong>3、list replace</strong></p><p>写完一个list用for遍历；<code>Alt+Enter</code>一下，他就告诉你还有更好的重构方法：</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/007.webp"></p><p>回车它就能帮你重构好。</p><p><strong>4、实现接口</strong></p><p>当我们需要实现接口的时候，只需要在接口的名称上<code>Alt+Enter</code>就能做到</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/008.webp"></p><p><strong>5、单词拼写</strong></p><p>程序员好多都英语不好，<code>Alt+Enter</code>简直是他们的福音；当我们拿不准一个单词拼写对不对的时候不放，<code>Alt+Enter</code>一下。</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/009.webp"></p><p>回车以后它能把相似的单词都列出来。</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/010.webp"></p><p>我们只需要找到对的那个就ok，是不是很好用。</p><p><strong>6、导包</strong></p><p>当你需要使用某个包时，只需要把光标移动到想导包的名称上，<code>Alt+Enter</code>导入完成。</p><h2 id="四、live-Templates（模板）"><a href="#四、live-Templates（模板）" class="headerlink" title="四、live Templates（模板）"></a><strong>四、live Templates（模板）</strong></h2><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/011.webp"></p><p>这是定义了大量的模板，只用敲出小小的几个字母提示，就可以回车使用模板生成大量的代码。</p><p>大家也可以在这里把常用的代码定义成模板，像main方法，for循环等等，方便快捷。</p><p>例如public static final int可以定义成下图所示。</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/012.webp"></p><p>不会自定义的查看创建模板的教程：<a href="https://www.imooc.com/video/16219">IDEA模板教程</a></p><h2 id="五、postfix"><a href="#五、postfix" class="headerlink" title="五、postfix"></a><strong>五、postfix</strong></h2><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/013.webp"></p><p>大家在写代码的时候，写完代码会用点来提示我们，例如，100. 敲完回车会生成一个for循环，用到的就是postfix，这是一种比 live Templates还快的小助手，当然它也是不可编辑的，里面定义了大量常见的函数和模板，熟练使用能提高我们很多的编码效率。</p><p>例如：</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/014.webp"></p><p>回车以后结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.size(); i++) &#123;</span><br><span class="line">        </span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h2 id="六、重构"><a href="#六、重构" class="headerlink" title="六、重构"></a><strong>六、重构</strong></h2><p><code>Shift+F6</code>  重命名</p><p>所有的文件，类名，函数名，属性名都可以重命名，值得点赞的是，只要你使用<code>Shift+F6</code>重命名，所有使用过这个名称的地方都会跟着改变。</p><p><strong>函数的重构</strong></p><p><code>Ctrl+F6</code> 重构函数</p><p>当你需要重构方法时，无论是增加参数，修改返回值，还是更改函数实现，只需要<code>Ctrl+F6</code>，就可以把所有用到此函数的地方一起重构，界面如下：</p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/015.webp"></p><h2 id="七、抽取"><a href="#七、抽取" class="headerlink" title="七、抽取"></a><strong>七、抽取</strong></h2><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/016.webp"></p><p><strong>1、抽取变量</strong></p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/017.webp"></p><p>类似于图中这样，很多地方都用到了“aaaaaa”这个字符串，很明显我们把“aaaaaa”抽取出来会更好。</p><p>对着它<code>Ctrl+Alt+v</code></p><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/%E4%BD%A0%E4%BB%AC%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8IDEA%E5%90%97/018.webp"></p><p>我们按照自己的需求，选择抽取一个还是抽取所有。</p><p><code>Ctrl+Alt+C</code>   抽取静态变量</p><p><code>Ctrl+Alt+F</code>    抽取成员变量</p><p>使用方法和抽取变量类似</p><p><code>Ctrl+Alt+P</code>　　抽取方法参数</p><p><code>Ctrl+Alt+M</code>　　抽取方法</p><p>当一个方法长度过长的时候，只需要把代码分离成多个模块，选中各个模块只要<code>Ctrl+Alt+M</code>就能抽取为一个新的方法，我们只需要引用就好。</p><p>其他的一些小技巧：</p><p>每次写完代码都 <code>Ctrl＋Alt+L</code> 一下，代码美观又符合规范。</p><p>IntelliJ IDEA的功能真的是强大到爆裂，这只是总结了很少的一部分。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intellij idea </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="2018/06/20/docker%E5%85%A5%E9%97%A8/"/>
      <url>2018/06/20/docker%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker代表的容器技术是近两年的大热技术，和人工智能、区块链等热点不同的，容器技术的门槛并不高，每一个开发和测试、运维都能在日常工作中掌握和使用，是当今IT从业人员的必备技能之一。</p></blockquote><a id="more"></a><h1 id="什么是docker？"><a href="#什么是docker？" class="headerlink" title="什么是docker？"></a><strong>什么是docker？</strong></h1><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><h1 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a><strong>什么是容器？</strong></h1><ul><li>一种虚拟化的方案</li><li>操作系统级别的虚拟化</li><li>只能运行相同或相似内核的操作系统</li><li>依赖Linux内核特性：Namespace和Cgroups</li></ul><h4 id="Linux容器技术Vs虚拟机："><a href="#Linux容器技术Vs虚拟机：" class="headerlink" title="Linux容器技术Vs虚拟机："></a><strong>Linux容器技术Vs虚拟机</strong>：</h4><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/QQ%E6%88%AA%E5%9B%BE20180621005109.png" alt="此处输入图片的描述"></p><h4 id="与传统虚拟机对比："><a href="#与传统虚拟机对比：" class="headerlink" title="与传统虚拟机对比："></a><strong>与传统虚拟机对比：</strong></h4><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/012.png" alt="此处输入图片的描述"><br><br></p><h4 id="场景示例-传统开发流程："><a href="#场景示例-传统开发流程：" class="headerlink" title="场景示例-传统开发流程："></a><strong>场景示例-传统开发流程</strong>：</h4><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/013.png" alt="此处输入图片的描述"><br><br></p><h4 id="场景示例-docker环境开发流程"><a href="#场景示例-docker环境开发流程" class="headerlink" title="场景示例-docker环境开发流程"></a><strong>场景示例-docker环境开发流程</strong></h4><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/014.png" alt="此处输入图片的描述"></p><ul><li>从图中可以看出一个显而易见的优点：磁盘占用空间小（虚拟机不但包含要运行的程序以及完整的库，还需要完整的操作系统，而容器仅需包含程序和其依赖的库就可以运行）</li><li>虚拟机需要模仿硬件的各种行为，对服务器资源消耗较大</li></ul><h1 id="Docker的目标："><a href="#Docker的目标：" class="headerlink" title="Docker的目标："></a><strong>Docker的目标</strong>：</h1><ul><li>提供简单轻量的建模方式</li><li>职责的逻辑分离</li><li>快速高效的开发生命周期</li><li>鼓励使用面向服务的架构</li></ul><h1 id="Docker的使用场景"><a href="#Docker的使用场景" class="headerlink" title="Docker的使用场景"></a><strong>Docker的使用场景</strong></h1><ol><li>使用Docker容器开发、测试、部署服务。</li><li>创建隔离的运行环境</li><li>搭建测试环境</li><li>构建多用户的平台即服务（PaaS)基础设施</li><li>提供软件即服务（SaaS)应用部署</li><li>高性能、超大规模的宿主机部署</li></ol><h1 id="Docker的优点"><a href="#Docker的优点" class="headerlink" title="Docker的优点"></a><strong>Docker的优点</strong></h1><h2 id="1-简化程序"><a href="#1-简化程序" class="headerlink" title="1. 简化程序"></a>1. <strong>简化程序</strong></h2><p>Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的    任务，在Docker容器的处理下，只需要数秒就能完成。</p><h2 id="2-简化部署"><a href="#2-简化部署" class="headerlink" title="2. 简化部署"></a>2. <strong>简化部署</strong></h2><p>如果你有选择恐惧症，还是资深患者。Docker 帮你    打包你的纠结！比如 Docker 镜像；Docker 镜像中包含了运行环境和配置，所以 Docker 可以简化部署多种应用实例工作。比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个镜像部署。</p><h2 id="3-节省开支"><a href="#3-节省开支" class="headerlink" title="3. 节省开支"></a>3. <strong>节省开支</strong></h2><p>一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。</p><hr><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a><strong>Docker安装</strong></h1><h2 id="CentOS-Docker-安装"><a href="#CentOS-Docker-安装" class="headerlink" title="CentOS Docker 安装"></a><strong>CentOS Docker 安装</strong></h2><p>Docker支持以下的CentOS版本：</p><ul><li>CentOS 7 (64-bit)</li><li>CentOS 6.5 (64-bit) 或更高的版本</li></ul><h3 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h3><p>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。<br>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p><h3 id="使用-yum-安装（CentOS-7下）"><a href="#使用-yum-安装（CentOS-7下）" class="headerlink" title="使用 yum 安装（CentOS 7下）"></a><strong>使用 yum 安装（CentOS 7下）</strong></h3><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。<br>通过 uname -r 命令查看你当前的内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 &#x2F;]# uname -r</span><br></pre></td></tr></table></figure><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/20180621104942.png" alt="此处输入图片的描述"></p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a><strong>安装 Docker</strong></h3><p>Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 &#x2F;]# yum -y install docker-io</span><br></pre></td></tr></table></figure><h3 id="启动-Docker-后台服务"><a href="#启动-Docker-后台服务" class="headerlink" title="启动 Docker 后台服务"></a><strong>启动 Docker 后台服务</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 &#x2F;]# service docker start</span><br></pre></td></tr></table></figure><h3 id="测试运行-hello-world"><a href="#测试运行-hello-world" class="headerlink" title="测试运行 hello-world"></a><strong>测试运行 hello-world</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 &#x2F;]# docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/02.png" alt="此处输入图片的描述"></p><p>到此，docker 在 CentOS 系统的安装完成。</p><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a><strong>镜像加速</strong></h2><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，使用<a href="https://blog.csdn.net/u010649766/article/details/78819834">阿里云镜像加速器</a>解决此问题。<br><br></p><h1 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a><strong>Docker使用</strong></h1><h2 id="Docker-Hello-World"><a href="#Docker-Hello-World" class="headerlink" title="Docker Hello World"></a><strong>Docker Hello World</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 sysconfig]# docker run ubuntu:16.04 &#x2F;bin&#x2F;echo &quot;Hello world&quot;</span><br></pre></td></tr></table></figure><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/005.png" alt="此处输入图片的描述"><br><strong>各个参数解析</strong>：</p><ul><li><strong>docker:</strong> Docker 的二进制执行文件。</li><li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li><li><strong>ubuntu:16.04:</strong> 指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li><strong>/bin/echo “Hello world”:</strong> 在启动的容器里执行的命令</li></ul><p>以上命令完整的意思可以解释为：Docker 以 ubuntu16.04 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p><hr><h2 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a><strong>运行交互式的容器</strong></h2><p>我们通过docker的两个参数 -i -t，让docker运行的容器实现”对话”的能力</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 sysconfig]# docker run -i -t ubuntu:16.04 &#x2F;bin&#x2F;bash</span><br><span class="line">root@7ecdf36fecf2:&#x2F;#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>各个参数解析：</strong></p><ul><li>-t:  在新容器内指定一个伪终端或终端。</li><li>-i:  允许你对容器内的标准输入 (STDIN) 进行交互。</li></ul><p>此时我们已进入一个 ubuntu16.04系统的容器<br>我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表：<br><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/006.png" alt="此处输入图片的描述"><br>我们可以通过运行exit命令或者使用CTRL+D来退出容器。</p><hr><h2 id="启动容器（后台模式）"><a href="#启动容器（后台模式）" class="headerlink" title="启动容器（后台模式）"></a><strong>启动容器（后台模式）</strong></h2><p>使用以下命令创建一个以进程方式运行的容器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 sysconfig]# docker run -d ubuntu:16.04 &#x2F;bin&#x2F;sh -c &quot;while true;do echo hello world; sleep 1; done&quot;</span><br><span class="line">2bfa0667e842480eabffad7547523e112eea178a97614f76c7152974201d8943</span><br></pre></td></tr></table></figure><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/007.png" alt="此处输入图片的描述"><br>在输出中，我们没有看到期望的”hello world”，而是一串长字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2bfa0667e842480eabffad7547523e112eea178a97614f76c7152974201d8943</span><br></pre></td></tr></table></figure><p>这个长字符串叫做容器ID，对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么。<br>首先，我们需要确认容器有在运行，可以通过 <strong>docker ps</strong> 来查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 sysconfig]# docker ps -[a] -[l]</span><br><span class="line">docker inspect </span><br></pre></td></tr></table></figure><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/009.png" alt="此处输入图片的描述"></p><p><strong>CONTAINER ID</strong>: 容器ID<br><strong>NAMES</strong>: 自动分配的容器名称<br>在容器内使用 <strong>docker logs</strong> 命令，查看容器内的标准输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 sysconfig]# docker logs 2bfa0667e842</span><br></pre></td></tr></table></figure><p><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/008.png" alt="此处输入图片的描述"></p><hr><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a><strong>停止容器</strong></h2><p>我们使用 <strong>docker stop</strong> 命令来停止容器:<br><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/010.png" alt="此处输入图片的描述"><br>通过 <strong>docker ps</strong> 命令我们可以看到容器已经停止工作</p><hr><h2 id="Docker-镜像使用"><a href="#Docker-镜像使用" class="headerlink" title="Docker 镜像使用"></a><strong>Docker 镜像使用</strong></h2><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><h3 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a><strong>列出镜像列表</strong></h3><p>我们可以使用 <strong>docker images</strong> 来列出本地主机上的镜像。<br><img src="https://zone01-1256880651.cos.ap-chengdu.myqcloud.com/Docker%E5%85%A5%E9%97%A8/011.png" alt="此处输入图片的描述"></p><p>各个选项说明:</p><ul><li><strong>REPOSITORY</strong>：表示镜像的仓库源</li><li><strong>TAG</strong>：镜像的标签</li><li><strong>IMAGE ID</strong>：镜像ID</li><li><strong>CREATED</strong>：镜像创建时间</li><li><strong>SIZE</strong>：镜像大小</li></ul><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如ubuntu仓库源里，有15.10、14.04等多个不同的版本，我们使用 <strong>REPOSITORY:TAG</strong> 来定义不同的镜像。<br>所以，我们如果要使用版本为15.10的ubuntu系统镜像来运行容器时，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 sysconfig]# docker run -i -t ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br><span class="line">root@8310d0e3225e:&#x2F;#</span><br></pre></td></tr></table></figure><p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像。</p><h3 id="获取一个新的镜像"><a href="#获取一个新的镜像" class="headerlink" title="获取一个新的镜像"></a><strong>获取一个新的镜像</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 ~]# docker pull ubuntu:13.10[root@jiax-001 ~]# docker pull ubuntu:13.10</span><br></pre></td></tr></table></figure><h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a><strong>查找镜像</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 ~]# docker search httpd</span><br></pre></td></tr></table></figure><h3 id="拖取镜像"><a href="#拖取镜像" class="headerlink" title="拖取镜像"></a><strong>拖取镜像</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 ~]# docker pull ubuntu:13.10</span><br></pre></td></tr></table></figure><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a><strong>创建镜像</strong></h3><p>当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。<br>1.从已经创建的容器中更新镜像，并且提交这个镜像<br>2.使用 Dockerfile 指令来创建一个新的镜像</p><h3 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a><strong>更新镜像</strong></h3><p>更新镜像之前，我们需要使用镜像来创建一个容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 ~]:~$ docker run -t -i ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br><span class="line">root@e218edb10161:&#x2F;# </span><br></pre></td></tr></table></figure><p>在运行的容器内使用 apt-get update 命令进行更新。<br>在完成操作之后，输入 exit命令来退出这个容器。<br>此时ID为e218edb10161的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit来提交容器副本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 ~]:~$ docker commit -m&#x3D;&quot;has update&quot; -a&#x3D;&quot;runoob&quot; e218edb10161runoob&#x2F;ubuntu:v2</span><br><span class="line">sha256:70bf1840fd7c0d2d8ef0a42a817eb29f854c1af8f7c59fc03ac7bdee9545aff8</span><br></pre></td></tr></table></figure><p>各个参数说明：</p><ul><li>-m:提交的描述信息</li><li>-a:指定镜像作者</li><li>e218edb10161：容器ID</li><li>runoob/ubuntu:v2:指定要创建的目标镜像名<br>我们可以使用 <strong>docker images</strong> 命令来查看我们的新镜像 runoob/ubuntu:v2</li></ul><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a><strong>构建镜像</strong></h3><p>我们使用命令 <strong>docker build</strong> ， 从零开始来创建一个新的镜像。为此，我们需要创建一个<a href="https://blog.csdn.net/kity9420/article/details/72853497">Dockerfile</a>  文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p><h2 id="常用的docker命令："><a href="#常用的docker命令：" class="headerlink" title="常用的docker命令："></a><strong>常用的docker命令</strong>：</h2><p>docker run –name=name -i -t   自定义容器name<br>docker start [-i] 容器名    重新启动停止的容器<br>docker rm 容器名        删除停止的容器<br>docker attach 容器名\id     以守护形式运行容器<br>docker run –name name -d     后台运行<br>docker top 容器名     查看容器内的进程<br>docker exec [-d][-i][-t] 容器名[COMMAND][ARG…]<br>docker stop 容器<br>docker kill 容器</p><h1 id="Docker实例"><a href="#Docker实例" class="headerlink" title="Docker实例"></a><strong>Docker实例</strong></h1><h2 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a><strong>Docker安装Nginx</strong></h2><h3 id="方法一：通过-Dockerfile构建"><a href="#方法一：通过-Dockerfile构建" class="headerlink" title="方法一：通过 Dockerfile构建"></a><strong>方法一：通过 Dockerfile构建</strong></h3><p>创建Dockerfile<br>首先，创建目录nginx,用于存放后面的相关东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jiax-001 ~]:~$ mkdir -p ~&#x2F;nginx&#x2F;www ~&#x2F;nginx&#x2F;logs ~&#x2F;nginx&#x2F;conf</span><br></pre></td></tr></table></figure><p>www目录将映射为nginx容器配置的虚拟目录<br>logs目录将映射为nginx容器的日志目录<br>conf目录里的配置文件将映射为nginx容器的配置文件<br>进入创建的nginx目录，创建Dockerfile</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line">    MAINTAINER NGINX Docker Maintainers<span class="string">&quot;docker-maint@nginx.com&quot;</span></span><br><span class="line">    ENV NGINX_VERSION <span class="number">1.10</span><span class="number">.1</span>-<span class="number">1</span>~jessie</span><br><span class="line">    RUN apt-key adv --keyserver hkp:<span class="comment">//pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \</span></span><br><span class="line">        &amp;&amp; echo <span class="string">&quot;deb http://nginx.org/packages/debian/ jessie nginx&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>apt/sources.list \</span><br><span class="line">        &amp;&amp; apt-get update \</span><br><span class="line">        &amp;&amp; apt-get install --no-install-recommends --no-install-suggests -y \</span><br><span class="line">                                                ca-certificates \</span><br><span class="line">                                                nginx=$&#123;NGINX_VERSION&#125; \</span><br><span class="line">                                                nginx-<span class="built_in">module</span>-xslt \</span><br><span class="line">                                                nginx-<span class="built_in">module</span>-geoip \</span><br><span class="line">                                                nginx-<span class="built_in">module</span>-image-filter \</span><br><span class="line">                                                nginx-<span class="built_in">module</span>-perl \</span><br><span class="line">                                                nginx-<span class="built_in">module</span>-njs \</span><br><span class="line">                                                gettext-base \</span><br><span class="line">        &amp;&amp; rm -rf /<span class="keyword">var</span>/lib/apt/lists<span class="comment">/*</span></span><br><span class="line"><span class="comment">    # forward request and error logs to docker log collector</span></span><br><span class="line"><span class="comment">    RUN ln -sf /dev/stdout /var/log/nginx/access.log \</span></span><br><span class="line"><span class="comment">        &amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log</span></span><br><span class="line"><span class="comment">        EXPOSE 80 443</span></span><br><span class="line"><span class="comment">    CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="方法二、docker-pull-nginx"><a href="#方法二、docker-pull-nginx" class="headerlink" title="方法二、docker pull nginx"></a><strong>方法二、docker pull nginx</strong></h3><h2 id="使用nginx镜像"><a href="#使用nginx镜像" class="headerlink" title="使用nginx镜像"></a><strong>使用nginx镜像</strong></h2><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="**运行容器"></a>**运行容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name my01nginx -v $PWD&#x2F;www:&#x2F;www -d nginx</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
